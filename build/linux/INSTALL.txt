Building Rem in Kubuntu Linux 7.10 "Gutsy Gibbon"
=================================================

Much of the explanations for building JUCE in Kubuntu are taken from this entry in Rem author's blog:
http://kosmaczewski.net/2007/11/16/building-juce-on-kubuntu-710/



Note about processor architectures
----------------------------------

JUCE cannot run on Linux on PowerPC processors, given that it relies on assembler code for dealing with endianness issues, as shown here:
http://www.koders.com/c/fid26F230513834417D1CC7BE6FDF5CE455DA49BE09.aspx
This rules out the possibility of running Rem on PowerPC systems, like G3, G4 and G5 Macs running Linux. For the moment, Rem can only be built with Linux running on processors supporting the i386 architecture.



1) Lua
------

Make sure that you have the Lua programming language installed; you can use your favorite package manager to install it, or you can grab the source files from 
http://www.lua.org/



2) SQLite 3 and CppUnit
-----------------------

Using Synaptic manager or any other package manager, install the "libsqlite3" and "libcppunit-dev" libraries.



3) Libraries required by JUCE
-----------------------------

Make sure that you have the following libraries installed in your Kubuntu installation using Synaptic or any other package manager, as specified in this JUCE forum post:
http://www.rawmaterialsoftware.com/juceforum/viewtopic.php?t=1312&highlight=audio+build

- libx11-dev
- libasound2-dev
- libfreetype6-dev
- libxinerama-dev
- libglu1-mesa-dev
- libglut3-dev (with its dependency freeglut3-dev too)



4) Libraries required by POCO
-----------------------------

Install "libssl-dev" using Synaptic or any other package manager.



5) Download premake from Sourceforge
------------------------------------

You can download premake http://premake.sourceforge.net/ from this link:
http://prdownloads.sf.net/premake/premake-linux-3.4.tar.gz

Unzip the file and install the binary where you want (typically /usr/bin). You have to do this manually, since premake is not available through the Synaptic package manager, in any repository.

You can also build it from source, downloading and extracting the following file:
http://prdownloads.sf.net/premake/premake-src-3.6.zip



6) Install CMake 2.6
--------------------

Download the source files for CMake and install it following the instructions:
http://www.cmake.org/files/v2.6/cmake-2.6.0.tar.gz



7) Build JUCE
-------------

- "cd" into the lib/juce/build/linux folder.
- Run "sh runpremake" which will use premake and Lua to create a makefile
- Run "make" (which is equal to "make CONFIG=Debug") or "make CONFIG=Release" to build the library; a couple of minutes later youâ€™ll have a "juce/bin/libjuce_debug.a" and a "juce/bin/libjuce.a" library files ready to use.



8) Build POCO
-------------

- "cd" into the lib/poco folder.
- Type "chmod 755 configure" to make the "configure" script executable.
- Type "chmod 755 build/script/*" to make all build scripts executable.
- Type "configure", "make" and "sudo make install" to build and install the POCO library. This operation might take several minutes.



9) Build Rem
------------

The "build.sh" shell script in this folder shows how to build Rem and the distribution package using CMake. The resulting binaries will be placed in a "bin" subfolder at the root of the current distribution of Rem.
